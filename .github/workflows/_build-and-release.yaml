name: Build & Release Public Actions Library

on:
  push:
  workflow_dispatch:
env:
  TZ: Europe/Oslo
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
permissions:
  contents: read

jobs:
  determine-release:
    name: Determine Release
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.check-release.outputs.release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Determine if we should release
        id: check-release
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          COMMIT_MESSAGE_REGEX_SKIP_RELEASE='\[skip release\]|\[release skip\]'

          if [[ '${{ github.ref_name }}' != 'main' ]]; then
            echo "Not on main branch, skipping release"
            echo "release=false" >> $GITHUB_OUTPUT
          
          elif [[ $COMMIT_MESSAGE =~ $COMMIT_MESSAGE_REGEX_SKIP_RELEASE ]]; then
            echo "Commit message contains skip marker, skipping release"
            echo "release=false" >> $GITHUB_OUTPUT
          
          elif [[ '${{ github.event.pusher.name }}' = 'public-actions-library[bot]' ]]; then
            echo "Pushed by bot, skipping release"
            echo "release=false" >> $GITHUB_OUTPUT
          
          else
            echo "release=true" >> $GITHUB_OUTPUT
          fi

  release:
    name: Release Public Actions Library
    needs: [ determine-release ]
    if: >
      github.ref_name == 'main'
      && needs.determine-release.outputs.release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Calculate new tag for versioning
        id: calculate-version
        uses: paulhatch/semantic-version@a8f8f59fd7f0625188492e945240f12d7ad2dca3 #v5.4.0
        with:
          tag_prefix: "v"
          search_commit_body: true
          version_format: "v${major}.${minor}.${patch}"
          major_pattern: '/(\!: |BREAKING CHANGE)/'
          minor_pattern: '/^(feat|feature)/'

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@af38ce09b1ec248aeb08eea2b16bbecea9e059f8 # v0.2.1
        with:
          gh-cli-version: 2.82.1 # renovate: github-releases=cli/cli

      - name: Set start tag for generating notes
        id: set-start-tag
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -x
          if [[ -z "${{ inputs.notes-start-tag }}" ]]; then
            set +e # Fail silently if no releases are found
            LATEST_TAG_OR_ERROR=$(gh api repos/${{github.repository}}/releases/latest --jq .tag_name 2>/dev/null)
            LATEST_TAG=$(if [[ $? = 0 ]]; then echo "$LATEST_TAG_OR_ERROR"; else echo "none"; fi)
            echo "notes-start-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "notes-start-tag=$inputs.notes-start-tag" >> $GITHUB_OUTPUT
          fi

      - name: Create Github Release with generated notes
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          if [[ "${{ steps.set-start-tag.outputs.notes-start-tag }}" == "none" ]]; then
            gh release create ${{ steps.calculate-version.outputs.version }} --generate-notes
          else
            gh release create ${{ steps.calculate-version.outputs.version }} --generate-notes --notes-start-tag ${{ steps.set-start-tag.outputs.notes-start-tag }}
          fi

